#!/bin/sh

BLUE='\033[1;34m'
RED='\033[1;31m'
YELLOW='\033[1;33m'
GREEN='\033[1;32m'
RESET='\033[0m'

SELF=$(realpath "$0")

f=
fz=
f_bib=
cmd=build
compiler=pdflatex
ascii=

run_showing() {
    printf "$GREEN\$$RESET %s\n" "$*" >&2
    "$@"
}

gen_pdf() {
    run_showing "$compiler" -interaction=nonstopmode -synctex=1 "$@"
}

gen_bib() {
    if grep -q '^\\usepackage.*\[.*biber.*\]{biblatex}' "$1.tex"; then
        bibtexer=biber
    else
        bibtexer=bibtex
    fi
    run_showing "$bibtexer" "$@"
}

embed_fonts() {
    run_showing gs -q -dNOPAUSE -dBATCH -dPDFSETTINGS=/prepress -sDEVICE=pdfwrite -sOutputFile="$1.embedded.pdf" "$1"
    run_showing mv "$1.embedded.pdf" "$1"
}

garbage() {
    f=
    delall=
    delpdf=
    for a; do
        case "$a" in
            '--all') delall=1 ;;
            '--pdf') delpdf=1 ;;
            *)       f="$a"   ;;
        esac
    done
    [ -n "$delpdf" ] && {
        shift
        echo "$f.pdf"
    }
    [ -n "$delall" ] && {
        shift
        N=$(basename "$f")
        echo "./.$N.build"
        echo "$f.synctex.gz"
    }
    echo "$f.aux"
    echo "$f.bbl"
    echo "$f.bcf"
    echo "$f.blg"
    echo "$f.log"
    echo "$f.out"
    echo "$f.run.xml"
    echo "$f.aux"
    echo "$f.lof"
    echo "$f.lot"
    echo "$f.toc"
    echo "$f.nav"
    echo "$f.snm"
    echo "$f.vrb"
    echo "$f.idx"
    echo "./texput.log"
}

garbage_hide() {
    f="$1"
    D=$(dirname "$f")
    N=$(basename "$f")
    cd "$D" || return 1
    mkdir -p ".$N.build"
    G=$(garbage "$N")
    echo "$G" |
        xargs -I {} mv {} ".$N.build/" 2>/dev/null
}

garbage_show() {
    f="$1"
    D=$(dirname "$f")
    N=$(basename "$f")
    cd "$D" || return 1
    mv ".$N.build/"* . 2>/dev/null
}

cleanup() {
    G=$(garbage --all "$@")
    printf "$RED>>> DELETING:$RESET\n"
    echo "$G"
    echo "$G" | xargs rm -rf
}

newer_than() {
    [ -s "$1" ] && [ -s "$2" ] && {
        res=$(find "$1" -prune -newer "$2")
        [ -n "$res" ]
    }
}

rerun_needed() {
    echo "$1" | grep -iq 'Warning: .*rerun '         ||
        echo "$1" | grep -iq 'Warning: .*(re)run '   ||
        echo "$1" | grep -iq 'Warning: .*again '     ||
        echo "$1" | grep -iq 'Warning: .*re-run '    ||
        echo "$1" | grep -iq 'Rerun to get outlines right'
}

bibtex_needed() {
    echo "$1" | grep -iq 'Please (re)run Biber on the file' ||
        echo "$1" | grep -iq 'Please (re)run BibTeX on the file'
}

highlight_lines() {
    if [ "$ascii" ]; then
        cat
    else
        env GREP_COLORS='ms=00;36' \
            grep -E 'l\.[0-9]+|line [0-9]+|$' --color=always
    fi
}

build() {
    f="$1"

    garbage_show "$f"

    # first latex run
    if OUT=$(gen_pdf "$f.tex"); then

        # run bib if needed
        if rerun_needed "$OUT" || newer_than "$f_bib" "$f.blg"; then
            if BIBOUT=$(gen_bib "$f") &&
                    ! echo "$BIBOUT" | grep -q 'does not contain any citations!'
            then
                # another latex is always needed after biber
                OUT=$(gen_pdf "$f.tex")

                # sometimes, the files get messy and a clean build is needed
                if bibtex_needed "$OUT"; then
                    cleanup --pdf "$f"
                    BIBOUT=$(gen_bib "$f") &&
                        OUT=$(gen_pdf "$f.tex")
                fi
            fi
        fi

        # more latex runs if needed
        reruns_max=5
        reruns_ctr=0
        while rerun_needed "$OUT"; do
            OUT=$(gen_pdf "$f.tex")
            reruns_ctr=$((reruns_ctr + 1))
            [ "$reruns_ctr" = "$reruns_max" ] && break
        done

        embed_fonts "$f.pdf"
    fi

    ERRS=$(echo "$OUT" |
               grep -A 1 -E '^! .+' | highlight_lines)
    WRNS=$(echo "$OUT" |
               grep -A 1 -E 'Warning:' |
               grep -E '^[A-Za-z\(]' | highlight_lines)

    # if [ "$BIBOUT" ]; then
    #     printf "$BLUE>>> BIBLIOGRAPHY:$RESET\n"
    #     echo "$BIBOUT"
    # fi
    if [ "$ERRS" ]; then
        printf "$RED>>> ERRORS:$RESET\n"
        echo "$ERRS"
    fi
    if [ "$WRNS" ]; then
        printf "$YELLOW>>> WARNINGS:$RESET\n"
        echo "$WRNS"
    fi

    garbage_hide "$f"

    pdf="$f.pdf"
    if [ ! -f "$pdf" ]; then
        printf "$RED>>> FAILED:$RESET no PDF generated\n"
        return 1
    fi
    if [ "$ERRS" ]; then
        return 1
    fi
}

get_data_file() {
    t="$1"
    for d in $HOME/.local/share /usr/local/share /usr/share; do
        target="$d/latexwrapper/$t"
        if [ -f "$target" ]; then
            echo "$target"
            return 0
        fi
    done
    return 1
}

gen_template() {
    f="$1"
    [ -n "$f" ] || f=paper
    t=$(get_data_file template.tex)
    [ -f "$t" ] || return 1
    cp "$t" "$f.tex"
}

symbols() {
    s=$(get_data_file symbols.org)
    [ -f "$s" ] || return 1
    column -s '|' -o '|' -t -H 1,5 <"$s" | less
}

find_tex_file() {
    # first .tex file that begins a document
    find . -maxdepth 1 -name '*.tex' | while read -r f; do
        grep -q '\\begin{document}' "$f" && {
            echo "$f"
            return
        }
    done
}

jail() {
    zip="$1"
    [ -f "$zip" ] || {
        echo No file found
        return 1
    }
    zip=$(realpath "$zip")

    jail_dir=$(mktemp -d)
    mkdir -p "$jail_dir/doc/"
    (
        cp "$SELF" "$jail_dir/" &&
            cd "$jail_dir/doc/" &&
            run_showing unzip "$zip"
    )

    script="cd ~/doc/"
    script="$script && sh ~/latexwrapper 2>&1 | tee ~/log"
    script="$script && ~/latexwrapper clear >/dev/null"

    jail_method=none
    case "$jail_method" in
        bwrap)
            run_showing                    \
                bwrap                      \
                --bind / /                 \
                --dev /dev                 \
                --unshare-all              \
                --die-with-parent          \
                --bind "$jail_dir" "$HOME" \
                sh -c "$script" ;;

        firejail)
            run_showing               \
                firejail              \
                --noprofile           \
                --private-tmp         \
                --blacklist=/mnt      \
                --net=none            \
                --private="$jail_dir" \
                sh -c "$script" ;;

        docker)
            run_showing              \
                docker run --rm -i   \
                -v "$jail_dir":/root \
                texlive/texlive      \
                sh -c "$script" ;;

        none)
            (cd "$jail_dir/doc/" &&
                 "$SELF" 2>&1 | tee ../log) ;;

        *)
            echo "UNKNOWN jail method!"
            return 1
    esac

    s=0
    tex=$(cd "$jail_dir/doc/" && find_tex_file)
    pdf="$jail_dir/doc/${tex%.*}.pdf"
    if [ -f "$pdf" ]; then
        target=$(dirname "$zip")
        name=$(basename "$zip")
        name="${name%.*}"
        run_showing cp "$jail_dir/doc/${tex%.*}.pdf" "$target/${name}.pdf" || s=1
        run_showing cp "$jail_dir/log" "$target/${name}.log"               || s=1
    else
        s=1
    fi

    run_showing rm -rf "$jail_dir"
    return $s
}

show_help() {
    self=$(basename "$0")
    printf 'usage: %s [OPTION]... <CMD> <TEX_FILE>\n' "$self"
    echo
    echo 'Options:'
    echo '  -a                 enable ascii mode'
    echo '  -c, --compiler CC  latex compiler'
    echo
    echo 'Commands:'
    echo '  b, build     compile .tex document (default command)'
    echo '  c, clean     clean build files and pdf'
    echo '  r, clear     clear build files'
    echo '  s, symbols   tex symbol cheatsheet'
    echo '  t, template  generate a template .tex file'
}

main() {
    skip=
    for a; do
        [ -n "$skip" ] &&
            skip= &&
            continue

        case "$a" in
            -a)                   ascii=1;       shift ;;
            -c|--compiler) shift; compiler="$1"; shift; skip=1 ;;
            build|b)              cmd=build;     shift ;;
            clean|c)              cmd=clean;     shift ;;
            clear|r)              cmd=clear;     shift ;;
            symbols|s)            cmd=symbols;   shift ;;
            template|t)           cmd=template;  shift ;;
            *.tex)                f="$a";        shift ;;
            *.zip)                fz="$a";       shift ;;

            -h|--help)
                show_help
                return ;;

            *)
                printf "Unknown argument '%s'" "$a"
                show_help
                return 1 ;;
        esac
    done

    if [ "$ascii" ]; then
        BLUE=
        RED=
        YELLOW=
        GREEN=
        RESET=
    fi

    if [ -f "$fz" ]; then
        jail "$fz"
        return
    elif [ -z "$f" ]; then
        f=$(find_tex_file)
    fi
    if [ ! -f "$f" ]; then
        case "$cmd" in
            build|clean)
                printf "$RED>>> ERROR:$RESET '%s' is not a file\n" "$f"
                return 1 ;;
        esac
    fi
    f="${f%.*}"
    # TODO: watch multiple bib files
    f_bib=$(find . -maxdepth 1 -name '*.bib' | head -n1)

    case "$cmd" in
        build)    build         "$f" ;;
        clean)    cleanup --pdf "$f" ;;
        clear)    cleanup       "$f" ;;
        template) gen_template  "$f" ;;
        symbols)  symbols            ;;
    esac
}

main "$@"
